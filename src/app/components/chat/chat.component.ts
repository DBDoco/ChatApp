import { Component, ElementRef, ViewChild, inject, OnInit, OnDestroy } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { NzInputModule } from 'ng-zorro-antd/input';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NzIconModule } from 'ng-zorro-antd/icon';
import { ActivatedRoute } from '@angular/router';
import { FirestoreService } from '../../services/firebaseFirestore.service';
import { AuthService } from '../../services/firebaseAuth.service';
import { CommonModule } from '@angular/common';
import { NzUploadModule } from 'ng-zorro-antd/upload';
import { NzUploadChangeParam, NzUploadFile } from 'ng-zorro-antd/upload';
import { onSnapshot, doc } from 'firebase/firestore';
import { HttpClient } from '@angular/common/http';
import { AIService } from './ai.service';

@Component({
  selector: 'app-chat',
  standalone: true,
  imports: [ReactiveFormsModule, FormsModule, NzInputModule, NzButtonModule, NzIconModule, CommonModule, NzUploadModule],
  providers: [FirestoreService, AuthService],
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css']
})
export class ChatComponent implements OnInit, OnDestroy {
  messages = [];
  messageContent: string = '';
  chatRoomId: string | null = '';
  generatedHashtags: string[] = [];
  isAITyping: boolean = false;

  @ViewChild('bottom') private bottom: ElementRef;
  @ViewChild('chatContainer') private chatContainer: ElementRef;

  fileList: NzUploadFile[] = [];

  private route: ActivatedRoute = inject(ActivatedRoute);
  private firestoreService: FirestoreService = inject(FirestoreService);
  protected authService: AuthService = inject(AuthService);
  private chatRoomSubscription: any;
  private http: HttpClient = inject(HttpClient);
  private aiService: AIService = inject(AIService);

  constructor() {}

  ngOnInit() {
    this.route.params.subscribe(params => {
      this.chatRoomId = params['id'];
      this.loadChatRoomMessages(true);
      this.updateMessageStatus();
    });
  }

  ngOnDestroy() {
    if (this.chatRoomSubscription) {
      this.chatRoomSubscription();
    }
  }

  message = {
    timestamp: { seconds: 1717611854, nanoseconds: 579000000 }
  };

  convertTimestamp(timestamp: { seconds: number, nanoseconds: number }): Date {
    const milliseconds = timestamp.seconds * 1000 + timestamp.nanoseconds / 1000000;
    return new Date(milliseconds);
  }

  sendHashtagRequest() {
    if (this.messages.length > 0) {
      const text = this.messages.slice(-20).map(m => m.content).join(' ');

      this.aiService.generateHashtagsLLM(text).subscribe(response => {
        if (response) {
          this.generatedHashtags = response.tags.slice(0, 10);
        }
      }, error => {
        console.error('Error sending hashtag request:', error);
      });
    }
  }

  async sendMessage() {
    if (this.chatRoomId && this.messageContent.trim() !== '') {
      try {
        const currentUser = this.authService.auth.currentUser;

        if (currentUser) {
          const message = {
            timestamp: new Date(),
            sender: currentUser.uid,
            content: this.messageContent,
            status: 'sent'
          };

          const chatRoom = await this.firestoreService.getChatRoom(this.chatRoomId);

          if (chatRoom) {
            const updatedMessages = Array.isArray(chatRoom.messages) ? [...chatRoom.messages, message] : [message];

            await this.firestoreService.updateChatRoom(this.chatRoomId, {
              messages: updatedMessages,
            });
          } else {
            console.error('Chat room not found!');
          }
        } else {
          console.error('Current user not found!');
        }
      } catch (error) {
        console.error('Error sending message:', error);
      }
      this.messageContent = '';
      this.updateMessageStatus();
      this.loadChatRoomMessages(false);
      await this.scrollToBottom();
    }
  }

  async loadChatRoomMessages(sendHashtagRequest?: boolean) {
    try {
      if (this.chatRoomId) {
        const chatRoomRef = doc(this.firestoreService.chatRoomsCollection, this.chatRoomId);
        this.chatRoomSubscription = onSnapshot(chatRoomRef, async (doc) => {
          if (doc.exists()) {
            const chatRoomData = doc.data();

            if (Array.isArray(chatRoomData['messages'])) {
              const senderUids = chatRoomData['messages'].map((message) => message.sender);

              this.firestoreService.getUsersByUids(senderUids)
                .then((senders) => {
                  this.messages = chatRoomData['messages'].map((message) => {
                    const sender = senders.find((user) => user.uid === message.sender);
                    return { ...message, senderDisplayName: sender?.displayName || 'Unknown', senderProfilePicture: sender?.photoURL || 'assets/default-profile.jpeg', autoGenerated: message.autoGenerated || false };
                  });
                  if (Array.isArray(chatRoomData['messages']) && chatRoomData['messages'].length > 0 && sendHashtagRequest)
                    this.sendHashtagRequest();
                });
            } else {
              console.error('Messages array not found!');
            }
          } else {
            console.error('Chat room not found!');
          }
        });
      }
    } catch (error) {
      console.error('Error loading chat room messages:', error);
    }
  }

  scrollToBottom(): void {
    try {
      this.bottom.nativeElement.scrollIntoView({ behavior: 'smooth' });
    } catch (err) {}
  }

  async updateMessageStatus() {
    try {
      if (this.chatRoomId) {
        const currentUser = this.authService.auth.currentUser;

        if (currentUser) {
          const chatRoom = await this.firestoreService.getChatRoom(this.chatRoomId);

          if (chatRoom) {
            const updatedMessages = chatRoom.messages.map((message) => {
              // Update status to 'read' for messages sent by other user
              if (message.sender !== currentUser.uid && message.status === 'sent') {
                return { ...message, status: 'read' };
              }
              return message;
            });

            await this.firestoreService.updateChatRoom(this.chatRoomId, {
              messages: updatedMessages,
            });
          } else {
            console.error('Chat room not found!');
          }
        } else {
          console.error('Current user not found!');
        }
      }
    } catch (error) {
      console.error('Error updating message status:', error);
    }
  }

  updateMessageStatusOnInput() {
    this.updateMessageStatus();
  }

  onMessageClick(messageContent: string) {
    this.isAITyping = true;
    this.aiService.autoRespond(messageContent).subscribe(response => {
      this.isAITyping = false;
      if (response && response.response) {
        this.messageContent = response.response.replace(/<\|assistant\|>/g, '');
      }
    }, error => {
      this.isAITyping = false;
      console.error('Error generating auto-response:', error);
    });
  }

  requestAutoResponse() {
    const lastMessage = this.messages.slice().reverse().find(message => message.sender !== this.authService.auth.currentUser?.uid);
    if (lastMessage) {
      this.isAITyping = true;
      this.aiService.autoRespond(lastMessage.content).subscribe(response => {
        this.isAITyping = false;
        if (response && response.response) {
          this.messageContent = response.response.replace(/<\|assistant\|>/g, '');
        }
      }, error => {
        this.isAITyping = false;
        console.error('Error generating auto-response:', error);
      });
    } else {
      console.error('No message from other user found to respond to.');
    }
  }
}
